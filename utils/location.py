import pprint

import requests
from lexicon import messages
from requests import ConnectTimeout


class LocationMethods:
    base_url = 'https://nominatim.openstreetmap.org/'
    countries_ru = [
                    'Австралия', 'Австрия', 'Азербайджан', 'Аландские о-ва', 'Албания', 'Алжир', 'Американское Самоа', 'Ангилья',
                    'Ангола', 'Андорра', 'Антарктида', 'Антигуа и Барбуда', 'Аргентина', 'Армения', 'Аруба', 'Афганистан', 'Багамы',
                    'Бангладеш', 'Барбадос', 'Бахрейн', 'Беларусь', 'Белиз', 'Бельгия', 'Бенин', 'Бермудские о-ва', 'Болгария',
                    'Боливия', 'Бонэйр, Синт-Эстатиус и Саба', 'Босния и Герцеговина', 'Ботсвана', 'Бразилия',
                    'Британская территория в Индийском океане', 'Бруней-Даруссалам', 'Буркина-Фасо', 'Бурунди', 'Бутан', 'Вануату',
                    'Ватикан', 'Великобритания', 'Венгрия', 'Венесуэла', 'Виргинские о-ва (Великобритания)', 'Виргинские о-ва (США)',
                    'Внешние малые о-ва (США)', 'Восточный Тимор', 'Вьетнам', 'Габон', 'Гаити', 'Гайана', 'Гамбия', 'Гана',
                    'Гваделупа', 'Гватемала', 'Гвинея', 'Гвинея-Бисау', 'Германия', 'Гернси', 'Гибралтар', 'Гондурас', 'Гонконг (САР)',
                    'Гренада', 'Гренландия', 'Греция', 'Грузия', 'Гуам', 'Дания', 'Джерси', 'Джибути', 'Доминика',
                    'Доминиканская Республика', 'Египет', 'Замбия', 'Западная Сахара', 'Зимбабве', 'Израиль', 'Индия', 'Индонезия',
                    'Иордания', 'Ирак', 'Иран', 'Ирландия', 'Исландия', 'Испания', 'Италия', 'Йемен', 'Кабо-Верде', 'Казахстан',
                    'Камбоджа', 'Камерун', 'Канада', 'Катар', 'Кения', 'Кипр', 'Киргизия', 'Кирибати', 'Китай', 'КНДР',
                    'Кокосовые о-ва', 'Колумбия', 'Коморы', 'Конго - Браззавиль', 'Конго - Киншаса', 'Коста-Рика', 'Кот-д’Ивуар',
                    'Куба', 'Кувейт', 'Кюрасао', 'Лаос', 'Латвия', 'Лесото', 'Либерия', 'Ливан', 'Ливия', 'Литва', 'Лихтенштейн',
                    'Люксембург', 'Маврикий', 'Мавритания', 'Мадагаскар', 'Майотта', 'Макао (САР)', 'Малави', 'Малайзия', 'Мали',
                    'Мальдивы', 'Мальта', 'Марокко', 'Мартиника', 'Маршалловы Острова', 'Мексика', 'Мозамбик', 'Молдова', 'Монако',
                    'Монголия', 'Монтсеррат', 'Мьянма (Бирма)', 'Намибия', 'Науру', 'Непал', 'Нигер', 'Нигерия', 'Нидерланды',
                    'Никарагуа', 'Ниуэ', 'Новая Зеландия', 'Новая Каледония', 'Норвегия', 'о-в Буве', 'о-в Мэн', 'о-в Норфолк',
                    'о-в Рождества', 'о-в Св. Елены', 'о-ва Питкэрн', 'о-ва Тёркс и Кайкос', 'о-ва Херд и Макдональд', 'ОАЭ', 'Оман',
                    'Острова Кайман', 'Острова Кука', 'Пакистан', 'Палау', 'Палестинские территории', 'Панама', 'Папуа — Новая Гвинея',
                    'Парагвай', 'Перу', 'Польша', 'Португалия', 'Пуэрто-Рико', 'Республика Корея', 'Реюньон', 'Россия', 'Руанда',
                    'Румыния', 'Сальвадор', 'Самоа', 'Сан-Марино', 'Сан-Томе и Принсипи', 'Саудовская Аравия', 'Северная Македония',
                    'Северные Марианские о-ва', 'Сейшельские Острова', 'Сен-Бартелеми', 'Сен-Мартен', 'Сен-Пьер и Микелон', 'Сенегал',
                    'Сент-Винсент и Гренадины', 'Сент-Китс и Невис', 'Сент-Люсия', 'Сербия', 'Сингапур', 'Синт-Мартен', 'Сирия',
                    'Словакия', 'Словения', 'Соединенные Штаты', 'Соломоновы Острова', 'Сомали', 'Судан', 'Суринам', 'Сьерра-Леоне',
                    'Таджикистан', 'Таиланд', 'Тайвань', 'Танзания', 'Того', 'Токелау', 'Тонга', 'Тринидад и Тобаго', 'Тувалу',
                    'Тунис', 'Туркменистан', 'Турция', 'Уганда', 'Узбекистан', 'Украина', 'Уоллис и Футуна', 'Уругвай',
                    'Фарерские о-ва', 'Федеративные Штаты Микронезии', 'Фиджи', 'Филиппины', 'Финляндия', 'Фолклендские о-ва',
                    'Франция', 'Французская Гвиана', 'Французская Полинезия', 'Французские Южные территории', 'Хорватия',
                    'Центрально-Африканская Республика', 'Чад', 'Черногория', 'Чехия', 'Чили', 'Швейцария', 'Швеция',
                    'Шпицберген и Ян-Майен', 'Шри-Ланка', 'Эквадор', 'Экваториальная Гвинея', 'Эритрея', 'Эсватини', 'Эстония',
                    'Эфиопия', 'Южная Георгия и Южные Сандвичевы о-ва', 'Южно-Африканская Республика', 'Южный Судан', 'Ямайка',
                    'Япония'
    ]

    @classmethod
    async def get_location_with_lat_lon(cls, lat: float, lon: float, get_address=True) -> tuple[str] | str:
        try:
            url = f'{cls.base_url}reverse?lat={lat}&lon={lon}&format=json&accept-languages=ru-Ru'
            response = requests.get(url)
            if not (response.status_code == 200 and 'error' not in response.json()):
                return messages.errors['incorrect_location']
            display_name = response.json()['display_name']
            info = response.json()['address']
            if 'country' not in info:
                return messages.errors['incorrect_location']
            country = info['country']
            if 'city' not in info:
                if 'town' not in info:
                    return messages.errors['incorrect_location']
                else:
                    city = info['town']
                    return country, city, display_name
            city = info['city']
            return country, city, display_name
        except ConnectTimeout:
            return messages.errors['incorrect_address']

    @classmethod
    async def get_country(cls, country: str):
        return country in cls.countries_ru

    @classmethod
    async def get_city(cls, city: str, country: str) -> bool:
        url = (f'{cls.base_url}search?featureType=city&featureType=city'
               f'&country={country}&city={city}&format=json&accept-language=ru-Ru')
        response = requests.get(url)
        if response.json():
            info = response.json()[0]['display_name'].split(', ')
            if info[0] == city:
                return info[-1]
        return False

    @classmethod
    async def get_country_with_city(cls, city: str) -> bool | str:
        url = (f'{cls.base_url}search?featureType=country&featureType=city'
               f'&city={city}&format=json&accept-language=ru-Ru')
        response = requests.get(url)
        if response.status_code == 200 and 'error' not in response.json() and response.json():
            info = response.json()[0]['display_name'].split(', ')
            if info[0] == city:
                return info[-1]
        return False
